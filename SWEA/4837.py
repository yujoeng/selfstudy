# 1부터 12까지의 숫자를 원소로 가진 집합 A가 있다. 집합 A의 부분 집합 중 N개의 원소를 갖고 있고,
# 원소의 합이 K인 부분집합의 개수를 출력하는 프로그램을 작성하시오.
# 해당하는 부분집합이 없는 경우 0을 출력한다. 모든 부분 집합을 만들어 답을 찾아도 된다.
# 예를 들어 N = 3, K = 6 경우, 부분집합은 { 1, 2, 3 } 경우 1가지가 존재한다.

# [입력]
# 첫 줄에 테스트 케이스 개수 T가 주어진다.  ( 1 ≤ T ≤ 50 )
# 테스트 케이스 별로 부분집합 원소의 수 N과 부분 집합의 합 K가 여백을 두고 주어진다. ( 1 ≤ N ≤ 12, 1 ≤ K ≤ 100 )

# [출력]
# 각 줄마다 "#T" (T는 테스트 케이스 번호)를 출력한 뒤, 답을 출력한다.
# # 

# A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
# N = 원소의 개수
# K = 원소의 합 
# 찾으려는 것 = K를 값으로 하는 부분집합의 개수  -> 해당 값으로 하는 부분집합이 없는 경우 0을 출력 

# 예를 들어 N = 3, K = 6 경우, 부분집합은 { 1, 2, 3 }경우 1가지가 존재한다.

#테스트 케이스 입력
T = int(input())

#테스트 케이스 개수 입력 for문 
for tc in range(1, T + 1):
       

#집합 A 입력하기 (tc  별로 부분집합 원소의 수 N과 부분 집합의 합 K 가 여백을 두고 주어진다.)
# 생각하는 집합 A를 나타내는 1번 방법 
    # arr = list(map(int, input().split()))
# 2번 방법 

    # N = len(arr)   #N : 원소의 개수 
    N,K = map(int,input().split())
    A = [i for i in range(1,13)]    #왜 i 가 앞에 입력되어야 하는지 
    cnt = 0
    sub__set = 0

    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] #집합 A 나타내는 식
    #??왜 집합이 더 나중에 입력되는지 -> 상관없다 함 
    
    for i in range(1<<12):
        for j in range(N):   
            if sub_set == K:    
                cnt +=1             #N개의 원소의 합이 K인 부분집합 구하기 


        #값이 'K' 인 부분집합의 수 출력
